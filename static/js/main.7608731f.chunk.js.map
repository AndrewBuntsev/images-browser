{"version":3,"sources":["logo.svg","parser.js","api.js","components/Toggle.js","components/CriteriaPanel.js","components/ImageSearchResult.js","components/SearchResultsPanel.js","components/MainContainer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","parse","text","entries","parseXmlTag","map","e","entry","title","id","published","author","name","uri","avatar","parseAuthor","url","str","match","tags","parseTags","parseEntry","tagName","RegExp","API_ULR","getImages","criteria","a","tag","fetch","then","res","Toggle","type","style","width","cursor","min","max","value","this","props","checked","onChange","onClick","toggle","React","Component","CriteriaPanel","className","tagChange","target","isLoading","src","imageSize","imageSizeChange","detailsMode","detailsModeChange","ImageSearchResult","image","size","key","onTagChange","innerText","href","slice","SearchResultsPanel","images","MainContainer","state","setState","onSearchTask","clearTimeout","setTimeout","onSearch","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7608731f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// parses whole the text\r\nexport function parse(text) {\r\n    const entries = parseXmlTag(text, 'entry');\r\n    if (!entries) return [];\r\n    return entries.map(e => parseEntry(e));\r\n}\r\n\r\n// extracts specific pieces of info from the whole entry data\r\nfunction parseEntry(entry) {\r\n    const title = parseXmlTag(entry, 'title')[0];\r\n    const id = parseXmlTag(entry, 'id')[0];\r\n    const published = parseXmlTag(entry, 'published')[0];\r\n    const author = parseAuthor(parseXmlTag(entry, 'author')[0]);\r\n    const url = parseImageUrl(entry);\r\n    const tags = parseTags(entry);\r\n\r\n    return { title, id, published, author, url, tags };\r\n}\r\n\r\n// extracts specific pieces of the author presonal info\r\nfunction parseAuthor(author) {\r\n    const name = parseXmlTag(author, 'name')[0];\r\n    const uri = parseXmlTag(author, 'uri')[0];\r\n    const id = parseXmlTag(author, 'flickr:nsid')[0];\r\n    const avatar = parseXmlTag(author, 'flickr:buddyicon')[0];\r\n\r\n    return { name, uri, id, avatar };\r\n}\r\n\r\n// extracts the image url\r\nfunction parseImageUrl(str) {\r\n    return str.match(/(?<=<link rel=\"enclosure\")(.|\\n)*?(?=\\/>)/g)[0].match(/(?<=href=\")(.|\\n)*?(?=\")/g)[0];\r\n}\r\n\r\n// extracts tags\r\nfunction parseTags(str) {\r\n    return str.match(/(?<=<category term=\")(.|\\n)*?(?=\")/g);\r\n}\r\n\r\n// extracts the inner data from the specified tag\r\nfunction parseXmlTag(str, tagName) {\r\n    return str.match(new RegExp(`(?<=<${tagName}>)(.|\\n)*?(?=<\\/${tagName}>)`, 'g'));\r\n}","import { parse } from \"./parser\";\r\n\r\n//const CORS_PROXY = 'https://cors-anywhere.herokuapp.com/';\r\n//const CORS_PROXY = 'https://thingproxy.freeboard.io/fetch/';\r\nconst CORS_PROXY = '';\r\n//http://www.whateverorigin.org/\r\n\r\nconst API_ULR = 'https://flickr.com/services/feeds/photos_public.gne?';\r\n\r\n\r\nexport async function getImages(criteria) {\r\n    const { tag } = criteria;\r\n    const text = await fetch(`${CORS_PROXY}${API_ULR}tags=${tag}`)\r\n        .then(res => res.text());\r\n\r\n    return parse(text);\r\n}\r\n","import React from 'react';\r\n\r\nexport default class Toggle extends React.Component {\r\n    render() {\r\n        return <input\r\n            type=\"range\"\r\n            style={{ width: '30px', cursor: 'pointer' }}\r\n            min=\"0\"\r\n            max=\"1\"\r\n            value={this.props.checked ? 1 : 0}\r\n            onChange={() => { }}\r\n            onClick={this.props.toggle} />;\r\n    }\r\n}\r\n","import React from 'react';\r\nimport Toggle from './Toggle';\r\n\r\n\r\nexport default class CriteriaPanel extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className={'search-criteria'}>\r\n        <div className={'search-criterium'}>\r\n          Search Images by Tag:\r\n        <input\r\n            type='text'\r\n            value={this.props.tag}\r\n            onChange={e => this.props.tagChange(e.target.value)}\r\n            className={'textblock'} />\r\n\r\n          {this.props.isLoading &&\r\n            <img src='https://cdn.lowgif.com/medium/d35d94c490e598e3-loading-gif-transparent-loading-gif.gif' width={30} />}\r\n        </div>\r\n        <div className={'search-criterium'}>\r\n          Image Size:\r\n        <input\r\n            type=\"range\"\r\n            id=\"imageSize\"\r\n            name=\"imageSize\"\r\n            min=\"100\"\r\n            max=\"500\"\r\n            value={this.props.imageSize}\r\n            onChange={e => this.props.imageSizeChange(e.target.value)} />\r\n        </div>\r\n        <div className={'search-criterium'}>\r\n          Details Mode:\r\n        <Toggle checked={this.props.detailsMode} toggle={() => this.props.detailsModeChange(!this.props.detailsMode)} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\n\r\nexport default class ImageSearchResult extends React.Component {\r\n  render() {\r\n    const { image, size } = this.props;\r\n    const tags = image.tags.map(tag => <span className={'tag'} key={tag} onClick={e => this.props.onTagChange(e.target.innerText)}>{tag} </span>)\r\n    return (\r\n      <div className={'image-wrapper'}>\r\n        {/* <span>{image.title}</span><br /> */}\r\n        <a href={image.url} target='_blank'>\r\n          <img src={image.url} width={size} />\r\n        </a>\r\n        {this.props.detailsMode && <div className={'details-section'}>\r\n          <div className={'image-title'}>{image.title}</div>\r\n          <div><span className={'image-field-name'}>Author:</span> <a href={image.author.uri} target='_blank'>{image.author.name}</a></div>\r\n          <div><span className={'image-field-name'}>Tags:</span> {tags}</div>\r\n          <div><span className={'image-field-name'}>Published:</span> {image.published.slice(0, 10)}</div>\r\n        </div>}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ImageSearchResult from './ImageSearchResult';\r\n\r\n\r\nexport default class SearchResultsPanel extends React.Component {\r\n  render() {\r\n    const images = this.props.images.map(image => <ImageSearchResult\r\n      image={image}\r\n      key={image.id}\r\n      size={this.props.imageSize}\r\n      detailsMode={this.props.detailsMode}\r\n      onTagChange={this.props.onTagChange} />);\r\n\r\n    const className = this.props.detailsMode ? 'details-mode' : 'tile-mode';\r\n\r\n    return (\r\n      <div>\r\n        <div className={className}>\r\n          {images}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n","import React from 'react';\r\n\r\nimport { getImages } from '../api';\r\nimport CriteriaPanel from './CriteriaPanel';\r\nimport SearchResultsPanel from './SearchResultsPanel';\r\n\r\nexport default class MainContainer extends React.Component {\r\n  state = {\r\n    tag: '',\r\n    isLoading: false,\r\n    images: [],\r\n    detailsMode: false,\r\n    imageSize: 100\r\n  };\r\n\r\n  onSearchTask;\r\n\r\n  tagChange = tag => {\r\n    this.setState({ tag, isLoading: true });\r\n\r\n    // set a threshold to avoid consequiteve high-frequent requests\r\n    if (this.onSearchTask) {\r\n      clearTimeout(this.onSearchTask);\r\n    }\r\n    this.onSearchTask = setTimeout(this.onSearch, 1000);\r\n  };\r\n\r\n  onSearch = async () => {\r\n    const images = await getImages(this.state);\r\n    this.setState({ images, isLoading: false });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <CriteriaPanel\r\n          tag={this.state.tag}\r\n          isLoading={this.state.isLoading}\r\n          tagChange={this.tagChange}\r\n          imageSize={this.state.imageSize}\r\n          imageSizeChange={imageSize => this.setState({ imageSize })}\r\n          detailsMode={this.state.detailsMode}\r\n          detailsModeChange={detailsMode => this.setState({ detailsMode })} />\r\n\r\n        <SearchResultsPanel\r\n          images={this.state.images}\r\n          imageSize={this.state.imageSize}\r\n          detailsMode={this.state.detailsMode}\r\n          onTagChange={this.tagChange} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport MainContainer from './components/MainContainer';\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        {/* <header className=\"App-header\">\r\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n          <p>\r\n            Edit <code>src/App.js</code> and save to reload.\r\n          </p>\r\n\r\n        </header> */}\r\n        <MainContainer />\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}